---
description:
globs:
alwaysApply: false
---
# Book Upload Process Guide

This guide documents the complete process for adding new books to the book reader app, from PDF to database.

## Overview

The book upload process consists of three main steps:
1. Create a book configuration file
2. Parse the PDF book to JSON structure
3. Upload the parsed book to MongoDB database

## File Structure

- **PDF Books**: Store in `files/[BookName]/` directory
- **Book Parser**: [parse-pdf-book-with-images.js](mdc:scripts/parse-pdf-book-with-images.js)
- **Database Uploader**: [upload-parsed-book.js](mdc:scripts/upload-parsed-book.js)
- **Database Schema**: [schema.md](mdc:src/server/database/schema.md)

## Step 1: Create Book Configuration

Create a JSON configuration file for the book with chapter detection settings.

**Example**: [nick-lane__transformer-config.json](mdc:files/Transformers/nick-lane__transformer-config.json)

Required structure:
```json
{
    "chapterNames": [
        "CHAPTER 1 TITLE",
        "CHAPTER 2 TITLE",
        // ... more chapters
    ],
    "metadata": {
        "title": "Full Book Title",
        "author": "Author Name"
    }
}
```

**Naming Convention**: `[author]__[book-slug]-config.json`

## Step 2: Parse PDF to JSON

Use the book parser to convert PDF to the app's JSON structure:

```bash
node scripts/parse-pdf-book-with-images.js PDF_PATH CONFIG_PATH [OUTPUT_PATH]
```

**Features**:
- Extracts text with page awareness
- Extracts and correlates embedded images
- Creates text chunks optimized for TTS
- Maps content to chapters based on configuration

**Output**: JSON file with book metadata and chapters following the [database schema](mdc:src/server/database/schema.md)

### Step 2a: Verify Image Extraction

After running the parser, verify that images were extracted successfully:

1. **Check Image Directory**: Verify images are created in `public/images/[book-folder-name]/`
2. **Verify Image Count**: Compare extracted images with parser output logs
3. **Check Image Positioning**: Verify images are positioned correctly in content:
   - Review the JSON output for `type: 'image'` chunks
   - Confirm `pageNumber` correlations are accurate
   - Ensure `imageUrl` paths point to actual extracted files
   - Verify `imageAlt` descriptions are meaningful

**Image Verification Checklist**:
- ✅ Images folder created: `public/images/[Book-Title]/`
- ✅ Image files extracted with correct naming: `page-XXX-image-N.jpg`
- ✅ JSON contains image chunks with correct `pageNumber`
- ✅ Image `imageUrl` paths are valid
- ✅ Images appear in logical positions within chapter content

## Step 3: Upload to Database

Upload the parsed JSON to MongoDB:

```bash
node scripts/upload-parsed-book.js JSON_PATH [--force]
```

**Features**:
- Validates JSON structure
- Checks for existing books
- Inserts book and chapters to respective collections
- Updates totals and verifies data integrity

## Example Workflow

```bash
# 1. Create config file
# files/MyBook/my-book-config.json

# 2. Parse PDF
node scripts/parse-pdf-book-with-images.js \
  files/MyBook/my-book.pdf \
  files/MyBook/my-book-config.json \
  files/MyBook/output.json

# 2a. Verify images extracted to public/images/My-Book/
# 2b. Check JSON output for correct image positioning

# 3. Upload to database
node scripts/upload-parsed-book.js files/MyBook/output.json
```

## Database Collections

After upload, data is stored in:
- **books**: Book metadata and totals
- **chapters**: Chapter content with text chunks and images

See [database schema](mdc:src/server/database/schema.md) for complete structure details.

## Important Notes

- Each step requires verification before proceeding
- **Critical**: Always verify image extraction and positioning after parsing
- Use `--force` flag to overwrite existing books
- Images are stored locally in `public/images/[book-folder]/`
- Text chunks are optimized for TTS playback (5-15 words per chunk)
- Page numbers are preserved for navigation and image correlation
- Image positioning in content must be manually verified for accuracy
