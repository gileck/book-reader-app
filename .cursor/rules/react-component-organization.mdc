---
description: when developing React components
globs: 
alwaysApply: false
---
# React Component Organization Pattern

This rule documents the pattern for organizing React components in our codebase, focusing on creating small, focused components with clear separation of concerns.

## Core Principles

1. **Single Responsibility**: Each component should handle one specific concern
2. **Separation of Logic and UI**: Separate business logic from UI rendering
3. **Composition over Complexity**: Compose small components rather than creating large monolithic ones
4. **Consistent Folder Structure**: Organize related components in logical folder structures
5. **Component Libraries**: Group related components into dedicated libraries/directories

## Implementation Pattern

For complex UI sections, follow this organization pattern:

### 1. Split Components by Responsibility

Break down large components into smaller, focused components:
- `PageLayout.tsx` - Overall page structure
- `HeaderSection.tsx` - Page header with title, actions
- `ContentSection.tsx` - Main content area
- `DataTable.tsx` - Table showing data
- `FilterBar.tsx` - Controls for filtering data

### 2. Container/Presentation Pattern

Separate logic from presentation:
- **Container Components**: Handle data fetching, state management, and business logic
- **Presentation Components**: Focus on rendering UI based on props with minimal logic

Example:
```typescript
// Container: Handles logic
const UserListContainer = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  
  // Data fetching, filtering logic, etc.
  
  return <UserList users={users} isLoading={isLoading} onDelete={handleDelete} />;
};

// Presentation: Focuses on UI
const UserList: React.FC<UserListProps> = ({ users, isLoading, onDelete }) => {
  if (isLoading) return <LoadingSpinner />;
  
  return (
    <div className="user-list">
      {users.map(user => (
        <UserListItem key={user.id} user={user} onDelete={onDelete} />
      ))}
    </div>
  );
};
```

### 3. Component Composition Hierarchy

Build UI through composition:
1. **Base/Atom Components**: Simple UI elements (buttons, inputs, etc.)
2. **Compound Components**: Combinations of base components (form fields, cards)
3. **Section Components**: Logical sections of a page or feature
4. **Page Components**: Compose sections into complete pages

### 4. Component Libraries and Dedicated Directories

When you have multiple related components that work together as a cohesive feature, organize them into dedicated component libraries:

#### Feature-Based Component Libraries

Create dedicated directories for complex features with multiple components:

```
src/client/routes/[ROUTE_NAME]/components/[FEATURE_NAME]/
├── index.ts                 # Main exports for the library
├── types.ts                 # Shared TypeScript types
├── README.md               # Documentation for the library
├── MainContainer.tsx        # Primary container component
├── SettingsDialog.tsx       # Feature configuration
├── ContentDisplay.tsx       # Content presentation
├── InputControls.tsx        # User input handling
├── ItemRenderer.tsx         # Individual item display
└── LoadingIndicator.tsx     # Loading states
```

#### Library Benefits

- **Cohesive Organization**: Related components grouped together
- **Single Entry Point**: Import multiple components from one location
- **Shared Types**: Common interfaces defined once
- **Documentation**: README explaining the library structure and usage
- **Encapsulation**: Internal components can remain private to the library

#### Library Creation Guidelines

Create a component library when:
- You have 4+ related components working together
- Components share common types and interfaces  
- The feature has distinct boundaries from other functionality
- Components are primarily used together as a unit

### 5. File Organization

#### Route-Specific Components

For components that are part of a specific route, follow this structure:
```
src/client/routes/[ROUTE_NAME]/
├── [ROUTE_NAME].tsx     // Main route component 
├── index.ts             // Exports the route
├── components/          // UI components specific to this route
│   ├── [FEATURE_LIB]/   // Feature-specific component libraries
│   ├── Header.tsx       // Route-specific header
│   ├── ContentSection.tsx 
│   └── ListItem.tsx     
├── hooks/               // Hooks specific to this route
│   ├── useRouteData.ts  
│   └── useFormHandling.ts
└── types.ts             // Shared types for this route
```

#### Shared Components

For reusable components used across multiple routes:
```
src/client/components/Feature/
├── index.ts             // Exports all components
├── FeatureContainer.tsx // Main container with logic
├── Feature.tsx          // Main presentation component
├── FeatureHeader.tsx    // Sub-component for header
├── FeatureList.tsx      // Sub-component for list
├── FeatureListItem.tsx  // Individual list item
└── types.ts             // Shared types and interfaces
```

### 6. Component Library Structure

Each component library should follow this pattern:

```typescript
// index.ts - Clean exports
export { MainComponent } from './MainComponent';
export { SettingsDialog } from './SettingsDialog';
export { InputControls } from './InputControls';
export * from './types';

// types.ts - Shared interfaces
export interface MainComponentProps {
  // Shared types and interfaces
}

// README.md - Documentation
# Feature Component Library
This library contains components for [feature description]
...
```

### 7. Split Files at These Boundaries

Consider splitting components into separate files when:
- A component exceeds 150 lines
- A component has multiple complex sub-components
- Logic and UI would be clearer if separated
- A component is reused in multiple places
- You have 3+ related components that could form a library

## File Size Guidelines

- Component files should generally stay under 150 lines
- If a component file exceeds 200 lines, it should definitely be split
- Container components should focus on logic and delegate rendering to presentation components
- Main page components should primarily compose other components rather than implementing complex rendering logic
- Component libraries should have clear boundaries and documentation

## Example Component Structure

For a typical feature or page:

```typescript
// FeaturePage.tsx - Main page component
const FeaturePage = () => {
  const { data, actions } = useFeatureLogic(); // Custom hook for logic
  
  return (
    <PageLayout>
      <FeatureHeader title={data.title} onAction={actions.handleAction} />
      <FeatureFilters filters={data.filters} onChange={actions.handleFilterChange} />
      <FeatureList items={data.items} onItemClick={actions.handleItemClick} />
    </PageLayout>
  );
};
```

Each component referenced above would live in its own file with focused responsibility.

## Implementation Process

1. **Identify Related Components**: Look for components that work together as a feature
2. **Create Component Library**: Move related components to a dedicated directory
3. **Create Index File**: Export all public components from a single entry point
4. **Add Shared Types**: Define common interfaces in `types.ts`
5. **Update Import Paths**: Fix all imports to use the new library structure
6. **Add Documentation**: Create README explaining the library purpose and usage
7. **Validate Implementation**: Run checks to ensure everything works correctly

## Validation

After implementing component organization changes, always run:

```bash
yarn checks
```

This command runs both TypeScript compilation and ESLint to ensure:
- All import paths are correct
- No TypeScript errors exist
- Code follows established linting rules
- Components are properly exported and accessible

The implementation is not complete until `yarn checks` passes with zero errors.
