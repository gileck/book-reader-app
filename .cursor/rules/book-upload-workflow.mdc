---
description: 
globs: 
alwaysApply: false
---
# Book Upload Process Guide

This guide documents the complete process for adding new books to the book reader app, from PDF to database with images.

## Overview

The book upload process consists of 5 main steps:
1. **Prepare book folder** with PDF and optional config.json
2. **Parse PDF** to extract text and images
3. **Verify parsing results** including image extraction
4. **Upload book content** to MongoDB database
5. **Upload images** to Vercel Blob storage

## Key Reference Files

- **Main Upload Guide**: [book-parser/BOOK_UPLOAD_GUIDE.md](mdc:book-parser/BOOK_UPLOAD_GUIDE.md) - Complete step-by-step process
- **PDF Parser**: [book-parser/parser/parse-pdf-book-generic.js](mdc:book-parser/parser/parse-pdf-book-generic.js) - Main parsing script with TOC extraction
- **Book Uploader**: [book-parser/upload-book/upload-parsed-book.js](mdc:book-parser/upload-book/upload-parsed-book.js) - Upload content to MongoDB
- **Image Uploader**: [book-parser/upload-book/upload-images-to-vercel-blob.js](mdc:book-parser/upload-book/upload-images-to-vercel-blob.js) - Upload images to Vercel Blob
- **Database Schema**: [src/server/database/schema.md](mdc:src/server/database/schema.md) - Database structure

## Step 1: Prepare Book Folder

Create a folder structure with your PDF and optional configuration:

```
MyBook/
‚îú‚îÄ‚îÄ book.pdf          # Your PDF file (any name)
‚îú‚îÄ‚îÄ config.json       # Optional: book configuration
```

**Optional Config File** (`config.json`):
```json
{
    "metadata": {
        "title": "Book Title",
        "author": "Author Name"
    },
    "chapterNames": [
        "Introduction: The Beginning",
        "Chapter 1: First Steps",
        "Chapter 2: Advanced Topics"
    ],
    "chapterPatterns": [
        "^chapter\\s+(\\d+|one|two|three|four|five|six|seven|eight|nine|ten)\\b",
        "^(\\d+)\\.\\s+([A-Za-z][a-zA-Z\\s]{8,40})$"
    ],
    "excludePatterns": [
        "^(appendix|bibliography|index|notes|references)$"
    ]
}
```

## Step 2: Parse PDF to JSON

Use the book parser to convert PDF to structured JSON:

```bash
cd book-parser/parser/

# Basic parsing (recommended - uses TOC extraction)
node parse-pdf-book-generic.js /path/to/MyBook/

# With custom config file
node parse-pdf-book-generic.js /path/to/MyBook/ /path/to/MyBook/config.json

# With debug mode for troubleshooting
node parse-pdf-book-generic.js /path/to/MyBook/ --debug
```

**Features**:
- Automatic TOC (Table of Contents) extraction from PDF bookmarks
- Page-aware text extraction with chapter detection
- Embedded image extraction using `pdfimages`
- Text chunking optimized for TTS (5-15 words per chunk)
- Image correlation with correct page numbers

## Step 3: Verify Parsing Results

**Critical**: Always verify parsing results before uploading:

### 3a. Check File Structure
```bash
ls -la /path/to/MyBook/
```

Expected structure:
```
MyBook/
‚îú‚îÄ‚îÄ book.pdf
‚îú‚îÄ‚îÄ config.json
‚îú‚îÄ‚îÄ output.json        # ‚úÖ Generated by parser
‚îú‚îÄ‚îÄ images/            # ‚úÖ Generated by parser
‚îÇ   ‚îî‚îÄ‚îÄ Book-Title/
‚îÇ       ‚îú‚îÄ‚îÄ page-001-image-1.jpg
‚îÇ       ‚îî‚îÄ‚îÄ page-XXX-image-N.jpg
‚îî‚îÄ‚îÄ debug/             # üêõ Only if --debug was used
```

### 3b. Verify JSON Structure
```bash
node -e "
const data = JSON.parse(require('fs').readFileSync('/path/to/MyBook/output.json', 'utf8'));
console.log('‚úÖ Book:', data.book.title, 'by', data.book.author);
console.log('‚úÖ Chapters:', data.chapters.length);
console.log('‚úÖ Total words:', data.book.totalWords);
console.log('‚úÖ Has images:', data.metadata.hasImages);
console.log('‚úÖ Total images:', data.metadata.totalImages);
"
```

### 3c. Verify Image Extraction
```bash
# Count extracted images
find /path/to/MyBook/images/ -name "*.jpg" -o -name "*.png" | wc -l

# List sample images
ls /path/to/MyBook/images/*/page-*.jpg | head -5
```

**Image Verification Checklist**:
- ‚úÖ Images folder created: `images/Book-Title/`
- ‚úÖ Image files extracted with naming: `page-XXX-image-N.jpg`
- ‚úÖ JSON contains image chunks with `type: 'image'`
- ‚úÖ Image chunks have correct `pageNumber` correlations
- ‚úÖ `imageName` references are valid filenames
- ‚úÖ Images appear in logical positions within chapters

## Step 4: Upload Book Content to Database

Upload the parsed JSON to MongoDB:

```bash
cd book-parser/upload-book/

# Upload the book content
node upload-parsed-book.js /path/to/MyBook/

# Or force overwrite if book already exists
node upload-parsed-book.js /path/to/MyBook/ --force
```

**Features**:
- Validates JSON structure against database schema
- Checks for existing books to prevent duplicates
- Inserts book metadata and chapters to respective collections
- Updates totals and verifies data integrity

## Step 5: Upload Images to Vercel Blob

Upload extracted images to cloud storage:

```bash
# Upload images using exact book title from database
node upload-images-to-vercel-blob.js /path/to/MyBook/ "Exact Book Title"
```

**Features**:
- Uploads all images to Vercel Blob storage
- Updates book record with relative `imageBaseURL`
- Updates chapter chunks to use `imageName` instead of local paths
- Provides public URLs for image access

## Environment Requirements

Ensure these are set up before starting:
- **Node.js** (v14 or higher)
- **pdfimages** tool from poppler-utils (`brew install poppler` on macOS)
- **Environment Variables**:
  - `BLOB_READ_WRITE_TOKEN` - Vercel Blob storage token
  - `DEBUG_TEXT` - Optional debug output path
- **MongoDB access** - Connection configured in scripts

## Database Collections

After successful upload, data is stored in:
- **books**: Book metadata, totals, and `imageBaseURL`
- **chapters**: Chapter content with text and image chunks

See [database schema](mdc:src/server/database/schema.md) for complete structure details.

## Complete Example Workflow

```bash
# 1. Create book folder with PDF
mkdir MyBook
cp book.pdf MyBook/

# 2. Parse PDF (with TOC extraction)
cd book-parser/parser/
node parse-pdf-book-generic.js ../../MyBook/

# 3. Verify results
ls -la ../../MyBook/
node -e "console.log(JSON.parse(require('fs').readFileSync('../../MyBook/output.json', 'utf8')).book.title)"

# 4. Upload content to database
cd ../upload-book/
node upload-parsed-book.js ../../MyBook/

# 5. Upload images to Vercel Blob
node upload-images-to-vercel-blob.js ../../MyBook/ "Book Title From Database"
```

## When to Use This Rule

Use this rule when the user:
- Asks how to upload a new book
- Wants to add a PDF book to the database
- Needs help with book parsing or image extraction
- Has issues with the book upload process
- Wants to verify their book upload was successful
- Encounters errors during any step of the process

## Important Notes

- **Always verify each step** before proceeding to the next
- **Critical**: Image extraction and positioning must be manually verified
- Use `--force` flag to overwrite existing books in database
- Images are stored in Vercel Blob with public URLs
- Text chunks are optimized for TTS playback
- Page numbers are preserved for navigation and image correlation
- TOC extraction is preferred over manual chapter configuration

## Always Reference the Full Guide

For detailed instructions, expected outputs, verification steps, troubleshooting, and the complete success checklist, always refer to the comprehensive guide at [book-parser/BOOK_UPLOAD_GUIDE.md](mdc:book-parser/BOOK_UPLOAD_GUIDE.md).
